# -*- coding: utf-8 -*-
"""therapist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zm10i9SR6UO9smoF278ulYLANHqZAoUm
"""

try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
import numpy as np
import io

from google.colab import files

uploaded = files.upload()
df = pd.read_csv(io.BytesIO(uploaded['emotiondata.csv']))
print(df)

train_dataset = df.sample(frac = 0.5)
test_dataset = df.drop(train_dataset.index)

def preprocess(df):
    data = df.copy()
    data.pop('Unnamed: 0')
    data.loc[data['label'] == '0','label'] = 0
    data.loc[data['label'] == '1','label'] = 1
    data.loc[data['label'] == '2','label'] = 2
    data.loc[data['label'] == '3','label'] = 3
    data.loc[data['label'] == '4','label'] = 4
    data.loc[data['label'] == '5','label'] = 5
    labels = data.pop('label').astype(np.float32)
    data = data.values
    return data, labels

train_data, train_labels = preprocess(train_dataset)
valid_data, valid_labels = preprocess(test_dataset)



encoder = tf.keras.layers.TextVectorization()
encoder.adapt(train_data)

model = tf.keras.Sequential([
    encoder,
    tf.keras.layers.Embedding(
        input_dim=len(encoder.get_vocabulary()),
        output_dim=64,
        # Use masking to handle the variable sequence lengths
        mask_zero=True),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, dropout=0.1)),
    tf.keras.layers.Dense(6, activation='softmax')
])

model.summary()

model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(),
              optimizer=tf.keras.optimizers.Adam(1e-4),
              metrics=['accuracy'])

callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', mode="min", patience=3, restore_best_weights=True)
history = model.fit(x=train_data,y=train_labels, epochs=8, validation_data=(valid_data,valid_labels), callbacks=[callback])

model.save('emotion_model')

emotion_model = keras.models.load_model('emotion_model')
emotion_model.summary()

loss, acc = emotion_model.evaluate(valid_data, valid_labels, verbose=2)
print('Restored model, accuracy: {:5.2f}%'.format(100 * acc))

def predict_message(pred_text):
    pred_text = np.array([pred_text])
    pred_text = pred_text.astype(np.ndarray)
    outcome = emotion_model.predict(pred_text)
    print(str(outcome[0][0] * 100) + "% Sadness")
    print(str(outcome[0][1] * 100) + "% Joy")
    print(str(outcome[0][2] * 100) + "% Love")
    print(str(outcome[0][3] * 100) + "% Anger")
    print(str(outcome[0][4] * 100) + "% Fear")
    print(str(outcome[0][5] * 100) + "% Surprise")

def generate_quote(pred_text):
  pred_text = np.array([pred_text])
  pred_text = pred_text.astype(np.ndarray)
  outcome = emotion_model.predict(pred_text)
  emotion = np.argmax(outcome)
  if emotion == 0:
    return "\"Sad hurts but it’s a healthy feeling.\" – J. K. Rowling"
  elif emotion == 1:
    return "\"Don't allow anyone to steal your joy.\" - Paulo Coelho"
  elif emotion == 2:
    return "\"And now these three remain: faith, hope and love. But the greatest of these is love.\" - 1 Corinthians 13:13"
  elif emotion == 3:
    return "\Holding on to anger is like grasping a hot coal with the intent of throwing it at someone else; you are the one who gets burned.\" - Buddha"
  elif emotion == 4:
    return "\"Fear is the brain’s way of saying there is something important for you to overcome.\" - Rachel Huber"
  elif emotion == 5:
    return "\"The best part of the journey is the surprise and wonder along the way.\" - Ken Poirot"

run = True
while (run):
  pred_text = input('How are you feeling? ')
  print(generate_quote(pred_text))
  predict_message(pred_text)
  choice = input('Would you like to continue? (y/n) ')
  if choice == 'n':
    run = False
print('Goodbye!')